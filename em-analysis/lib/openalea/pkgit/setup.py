# -*- coding: utf-8 -*-
__revision__ = "$Id: $"

import sys
import os

from setuptools import setup, find_packages

def read_metainfo(filename, section='metainfo', verbose=False):
    """
    read_metainfo come from:
    from openalea.deploy.metainfo import read_metainfo
    """

    """Parse a section in a given file using ConfigParser module

    This function read a file (called `filename`), which must have a format 
    compatible with ConfigParser::

        [metainfo]
        option1 = string1
        option2 = string2
        ...

    Then, it parses the section [metainfo] that must be present and returns a dictionary
    containing all these options.

    :param filename: a filename with ConfigParser format
    :param section: a section to look for in the file
    :mode sphinx: a string in ["sphinx", "setup"] to return different information

    :Example:

        read_metainfo('metainfo.ini', metainfo='metainfo')

    :author: Thomas Cokelaer <Thomas Cokelaer __at__ sophis inria fr>
    """
    compulsary_words = ['project','version','authors','package','release']
    green =  lambda x: x

    if verbose:
        print green('Reading metainfo ')
    import ConfigParser 
    config = ConfigParser.RawConfigParser()
    res = config.read(filename)
    if len(res)==0:
        raise IOError("Input file %s does not seem to exist" % filename)

    metadata = {}

    for option in config.options(section):
        if verbose:
            print green('...%s: %s' % (option, config.get(section, option)))
        metadata[option] = config.get(section, option)

    for word in compulsary_words:
        if word not in metadata.keys():
            raise ValueError('%s field not found in metainfo.ini' % word)

    return metadata


# Reads the metainfo file
metadata = read_metainfo('metainfo.ini', verbose=True)
for key,value in metadata.iteritems():
    exec("%s = '%s'" % (key, value))

#The metainfo files must contains
# version, release, project, name, namespace, pkg_name,
# description, long_description,
# authors, authors_email, url and license
# * version is 1.0.0 and release 1.0
# * project must be in [openalea, vplants, alinea]
# * name is the full name (e.g., PkgIt) whereas pkg_name is only 'PkgIt'

# name will determine the name of the egg, as well as the name of 
# the pakage directory under Python/lib/site-packages). It is also 
# the one to use in setup script of other packages to declare a dependency to this package)
# (The version number is used by deploy to detect UPDATES)


# Packages list, namespace and root directory of packages

pkg_root_dir = 'src'
pkgs = [ pkg for pkg in find_packages(pkg_root_dir)]
top_pkgs = [pkg for pkg in pkgs if  len(pkg.split('.')) < 2]
packages = pkgs
package_dir = dict( [('',pkg_root_dir)] + [(pkg, pkg_root_dir + "/" + pkg) for pkg in top_pkgs] )

# Define global variables 
has_scons = False
if has_scons:
    build_prefix = "build-scons"
    scons_scripts=['SConstruct']
    lib_dirs = {'lib' : build_prefix+'/lib' }
    inc_dirs = { 'include' : build_prefix+'/include' }
    bin_dirs = { 'bin' : build_prefix+'/bin' }
else:
    build_prefix = None
    scons_scripts=None
    lib_dirs = None
    inc_dirs = None
    bin_dirs = None

# dependencies to other eggs
setup_requires = []
install_requires = []

# web sites where to find eggs
dependency_links = ['http://openalea.gforge.inria.fr/pi']
has_project = bool('openalea')
setup(
    name=name,
    version=version,
    description=description,
    long_description=long_description,
    author=authors,
    author_email=authors_email,
    url=url,
    license=license,
    keywords = '',	

    # package installation
    packages= packages,	
    package_dir= package_dir,

    # Namespace packages creation by deploy
    #namespace_packages = [namespace],
    #create_namespaces = False,
    zip_safe= False,

    # Dependencies
    setup_requires = setup_requires,
    install_requires = install_requires,
    dependency_links = dependency_links,


    # Binary installation (if necessary)
    # Define what to execute with scons	
    scons_scripts=scons_scripts,
    # Tell deploy where to find libs, includes and bins generated by scons.
    lib_dirs = lib_dirs,
    inc_dirs = inc_dirs,
    bin_dirs = bin_dirs,

    # Eventually include data in your package
    # (flowing is to include all versioned files other than .py)
    include_package_data = True,
    # (you can provide an exclusion dictionary named exclude_package_data to remove parasites).
    # alternatively to global inclusion, list the file to include   
    #package_data = {'' : ['*.pyd', '*.so'],},

    # postinstall_scripts = ['',],

    # Declare scripts and wralea as entry_points (extensions) of your package 
    entry_points = { 'console_scripts': ['pkgit = pkgit.easy_pkg:main'],},
    )


