; Template installer configured by makeWinInstaller.py ;


[Setup]
AppName=$APPNAME for Python $PYTHONMAJOR.$PYTHONMINOR
AppVersion=$APPVERSION
DefaultDirName=None
DefaultGroupName=$APPNAME
OutputBaseFilename=$APPNAME-$APPVERSION$INSTTYPE-Installer-Py$PYTHONMAJOR.$PYTHONMINOR
;SetupIconFile=..\..\visualea\share\openalea_icon.ico
PrivilegesRequired=admin

Uninstallable=no
Compression=lzma/max

DisableDirPage=yes
DisableProgramGroupPage=yes
DisableReadyPage=yes

$SETUP_CONF

[Files]
$INSTALLER_FILES


[Code]
type
  TEggArray = Array [0..$EGGMAXID] of String;

const
  PythonMajorVersion = $PYTHONMAJOR       ;
  PythonMinorVersion = $PYTHONMINOR       ;

var
  Eggs :  TEggArray;
  DetectEnvironmentPage: TOutputMsgWizardPage;
  AbortInstall : Boolean;
  $TEST_VARIABLES: Boolean;

(*** ------------------------- ***)
(*** Various utility functions ***)
(*** ------------------------- ***)
procedure InitEggArray();
begin
$EGGINIT
end;

(* GetTempDir doesn't work and typing ExpandConstant('{tmp}') is boring *)
function MyTempDir(): String;
begin
    Result := ExpandConstant('{tmp}\');
end;

(* Return the directory of the python executable *)
function GetPythonDirectory(): String;
begin
  Result:=ExpandConstant(Format('{reg:HKLM\Software\Python\PythonCore\%d.%d\InstallPath,|None}',[PythonMajorVersion,PythonMinorVersion]))
end;

(* Install eggs *)
function InstallEgg(egg:String; arg:String): Boolean;
var
   ResultCode: Integer;
begin
   if FileExists(GetPythonDirectory()+'\Scripts\alea_install.exe') then
      begin
      Result := Exec(GetPythonDirectory()+'\Scripts\alea_install.exe',
	                 '--prefix '+ GetPythonDirectory() + ' ' + arg+ ' ' + egg, '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
      (*MsgBox('Used alea_install', mbInformation, MB_OK);*)
      end
   else
        begin
      Result := Exec(GetPythonDirectory()+'\Scripts\easy_install.exe',
                     '--prefix '+ GetPythonDirectory() + ' ' + arg+ ' ' + egg, '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
      (*MsgBox('Used easy_install', mbInformation, MB_OK);*)
      end                     ;
end;

(* Install msi files *)
function InstallMsi(msi:String): Boolean;
var
   ResultCode: Integer;
begin
  Result := Exec('msiexec','/i '+ msi,'', SW_SHOW, ewWaitUntilTerminated, ResultCode) and (ResultCode=0);
end;

(* Install exe files *)
function InstallExe(exe:String): Boolean;
var
   ResultCode: Integer;
begin
  Result := Exec( exe, '', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) and (ResultCode=0);
end;

(* Install zipdist files *)
function InstallZipdist(zipdist:String): Boolean;
var
   ResultCode: Integer;
begin
   if FileExists(GetPythonDirectory()+'\Scripts\alea_install.exe') then
       Result := Exec(GetPythonDirectory()+'\Scripts\alea_install.exe',
	                  zipdist, '', SW_HIDE, ewWaitUntilTerminated, ResultCode)
   else
       Result := Exec(GetPythonDirectory()+'\Scripts\easy_install.exe',
                      zipdist, '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
end;

(*** --------------------------------------------------- ***)
(*** Functions to detect and install required components ***)
(*** --------------------------------------------------- ***)
function Detectpython: Boolean;
begin
  Result := RegKeyExists(HKLM, Format('Software\Python\PythonCore\%d.%d\InstallPath', [PythonMajorVersion,PythonMinorVersion])) and
            DirExists(GetPythonDirectory()) and FileExists(GetPythonDirectory()+'\python.exe');
end;


$INSTALL_AND_DETECTION_CODE


(*** ---------------------------------- ***)
(*** Functions used to install $APPNAME ***)
(*** ---------------------------------- ***)
function Install$APPNAME(): Boolean;
$INSTALL_APP_BODY


(*** ------------------------------------------------------- ***)
(*** Function called at the very beggining of the setup proc ***)
(*** ------------------------------------------------------- ***)
procedure Deploy();
var
  res : Boolean;
begin
  res := True
  WizardForm.StatusLabel.Caption:='Preparing installation';
  WizardForm.Update();

  $DEPLOY_BODY

  if res then
    begin
      WizardForm.StatusLabel.Caption:='Installing $APPNAME, please wait...';
      WizardForm.Update();
      WizardForm.Update();
      res := Install$APPNAME();
    end;
   if res then
      WizardForm.ProgressGauge.Position := 100;
      WizardForm.Update();
end;

procedure DetectEnv(Sender: TWizardPage);
var
  DetectInfo : TNewStaticText;
  caption : String;
  PyInstalled   : Boolean; 
begin
  PyInstalled   := True; (*fixed by TEST_VAR_RESULTS*)

  $TEST_VAR_RESULTS

  DetectInfo := TNewStaticText.Create(Sender);
  DetectInfo.Parent := Sender.Surface;
  DetectInfo.AutoSize := True;
  DetectInfo.Top := 60;

  $REPORT_VAR_RESULTS

  DetectInfo.Caption := caption;
end;


procedure CurPageChanged(id:Integer);
begin
  case id of
    wpInstalling:
      Deploy()
  end;
end;

function PrepareToInstall(var NeedsRestart: Boolean): String;
begin
    Result := ''
    if ABORTINSTALL then
        Result := 'Some components cannot be installed by this installer. Please install them yourself and re-run this installer.';
end;


procedure CurStepChanged(CurStep: TSetupStep);
var
  ResultCode, int1, int2, int3: Integer;
  str1, str2, str3: String;  
begin
   case CurStep of
      ssInstall :
            begin
            end;
      ssPostInstall:
      begin
        $POSTINSTALLCODE
      end
   end;
end;


procedure InitializeWizard();
begin
    InitEggArray();
    DetectEnvironmentPage := CreateOutputMsgPage(wpLicense,
                          'Information', '$APPNAME Installer will try to detect your environment.',
                          '$APPNAME requires Python and several extensions.'+#13 +
                          'This installer will install the required softs. Please wait...');
    DetectEnvironmentPage.onActivate := @DetectEnv;
end;


