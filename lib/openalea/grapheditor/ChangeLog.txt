
June 2010 Changes
-----------------

* The interface checking is now part of grapheditor and doesn't abuse openalea's interface.py module.
  The registering of grapheditor classes as openalea widget classes was accidental ( this needs to be cleared up
  on the OpenAlea side too I believe).
* Explicited the connector notion in qtgraphview. Still have to see if this can't be moved up into baselisteners



23/10/2009 : First experimental version of the refactor GraphEditor
-------------------------------------------------------------------

This check-in sets the basic structure for a more flexible graph editor.
Beware, these are the early stages, names are very likely to change.
I use a painter metaphore to describe the system.

* The graph is the subject of the painter, it is a talkative graph.
* The painter evolves from just a listener of what the graph says, to a
  painter with a canvas, to a painter with hands.
* The client who has the power of transforming the painter into a
  sculpturer who will sculpt the talkative graph.


This metaphore is implemented in several classes.

* Generic modules : gengraphview and gengraphview_interfaces.
  Implements the basic signal dispatching system from the model.
  It's the painter without hands nor canvas.
* Qt specifialisation of the above : qtgraphview. Knows that it should paint
  on a QGraphicsScene but not how. It's the painter with the canvas but no hand.
* dataflowview is a reimplementation of openalea's dataflow editor with the
  new framework. The goal is a one-to-one match. This provides the painter with
  hands to paint on the canvas and tools to interact with the graph.
  This is the part that the user can customize.

